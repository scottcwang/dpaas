openapi: "3.0.0"
info:
  description: "Securely collects confidential data from users per a predefined schema, and runs it through a predefined differential privacy machine learning algorithm."
  version: "0.0.1"
  title: "Differential privacy as a service"
  contact:
    email: "wangsc@cs.wisc.edu"
paths:
  /:
    post:
      summary: "Create a collection"
      requestBody:
        description: "Collection object"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
              - "attributes"
              - "fit_model"
              - "fit_arguments"
              - "description"
              - "public_key"
              - "response_start_time"
              - "response_end_time"
              properties:
                attributes:
                  type: "array"
                  items:
                    type: "string"
                  description: "Will be shown to the user as the names of the data collection fields"
                fit_model:
                  type: "string"
                  enum:
                  - "PCA"
                  - "LinearRegression"
                  - "GaussianNB"
                  - "LogisticRegression"
                  - "KMeans"
                  - "StandardScaler"
                  description: "The diffprivlib model class instantiator to call"
                attribute_y_index:
                  type: "number"
                  description: "If provided, must be an index within `attributes`"
                fit_arguments:
                  type: "object"
                  description: "Will be passed to the diffprivlib model class instantiator"
                description:
                  type: "string"
                  description: "Will be rendered as Markdown and shown to the user"
                public_key:
                  type: "string"
                  description: "PEM-encoded public key, used to sign tokens"
                response_start_time:
                  type: "string"
                  format: "date-time"
                response_end_time:
                  type: "string"
                  format: "date-time"
      responses:
        201:
          description: "Collection created"
          content:
            application/json:
              schema:
                type: "integer"
                description: "Collection ID"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Request is not JSON"
                - "JSON payload does not conform to schema"
                - "Public key could not be parsed"
                - "Fit model is not supported"
                - "attribute_y_index invalid"
  /{collectionId}/token/{action}:
    post:
      summary: "Causes the server to expect a token, issued at the time of this request, for a particular action"
      requestBody:
        description: "Unique nonce. Required for `entry` action"
        required: true
        content:
          application/octet-stream:
            schema:
              type: "string"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "action"
        in: "path"
        required: true
        schema:
          type: "string"
          enum:
          - "entry"
          - "enqueue"
          - "status"
      responses:
        201:
          description: "Successful"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Unknown action"
                - "No nonce provided for entry action"
        410:
          description: "Not within collection interval"
        404:
          description: "Collection ID not found"
  /{collectionId}/entry/{token}:
    get:
      summary: "Returns a page to create or edit an entry for this collection"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "token"
        in: "path"
        required: true
        description: "Either:\n- a JWT, signed by the private key for this collection, containing the claims:\n  - `iat`, the time of a previous request to `/{collectionId}/token/entry`\n  - `sub`, the nonce in said request\n- a JWT previously issued by this server to edit an existing entry"
        schema:
          type: "string"
      responses:
        200:
          description: "Entry page"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Token could not be decoded"
                - "Token does not contain nonce"
                - "Token does not contain issuance time"
        403:
          description: "Session error"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "A corresponding session was not found"
                - "Token not issued at same time as session request"
        410:
          description: "Not within collection interval"
        404:
          description: "Collection ID not found"
  /{collectionId}/submit:
    post:
      summary: "Creates or edits an entry for this collection. Can be called only via the form on the page retrieved by a `GET` request to `/{collectionId}/entry/{token}`"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        200:
          description: "URL of page to edit the submitted entry"
          content:
            application/json:
              schema:
                type: "string"
        404:
          description: "Collection ID not found"
  /{collectionId}/enqueue/{token}:
    post:
      summary: "Causes the model for this collection to be enqueued for fitting"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "token"
        in: "path"
        required: true
        description: "A JWT, signed by the private key for this collection, containing the `iat` claim, the time of a previous request to `/{collectionId}/token/enqueue`"
        schema:
          type: "string"
      responses:
        202:
          description: "Successfully enqueued"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Token could not be decoded"
                - "Token contains nonce for non-entry action"
                - "Already enqueued"
        403:
          description: "Session error"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "A corresponding session was not found"
                - "Token not issued at same time as session request"
        404:
          description: "Collection ID not found"
  /{collectionId}/status/{token}:
    post:
      summary: "Obtains the status of this collection, or the fit object if the fit is complete"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "token"
        in: "path"
        required: true
        description: "A JWT, signed by the private key for this collection, containing the `iat` claim, the time of a previous request to `/{collectionId}/token/status`"
        schema:
          type: "string"
      responses:
        200:
          description: "Pickled fit object from completed model"
          content:
            application/octet-stream:
              schema:
                type: "string"
        202:
          description: "Processing"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Running"
                - "Enqueued"
        204:
          description: "Not yet enqueued for processing"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Token could not be decoded"
                - "Token contains nonce for non-entry action"
                - "Already enqueued"
        403:
          description: "Session error"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "A corresponding session was not found"
                - "Token not issued at same time as session request"
        404:
          description: "Collection ID not found"
externalDocs:
  description: "GitHub"
  url: "http://github.com/scottcwang/dpaas"