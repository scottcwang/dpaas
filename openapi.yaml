openapi: "3.0.0"
info:
  description: "Securely collects confidential data from users per a predefined schema, and runs it through a predefined differential privacy machine learning algorithm."
  version: "0.0.2"
  title: "Differential privacy as a service"
  contact:
    email: "wangsc@cs.wisc.edu"
paths:
  /:
    post:
      summary: "Create a collection"
      requestBody:
        description: "Collection object"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
              - "attributes"
              - "fit_model"
              - "fit_arguments"
              - "description"
              - "public_key"
              - "response_start_time"
              - "response_end_time"
              properties:
                attributes:
                  type: "array"
                  items:
                    type: "string"
                  description: "Will be shown to the user as the names of the data collection fields"
                fit_model:
                  type: "string"
                  enum:
                  - "PCA"
                  - "LinearRegression"
                  - "GaussianNB"
                  - "LogisticRegression"
                  - "KMeans"
                  - "StandardScaler"
                  description: "The diffprivlib model class instantiator to call"
                attribute_y_index:
                  type: "number"
                  description: "If provided, must be an index within `attributes`"
                fit_arguments:
                  type: "object"
                  description: "Will be passed to the diffprivlib model class instantiator"
                description:
                  type: "string"
                  description: "Will be rendered as Markdown and shown to the user"
                client_verify_key:
                  type: "string"
                  description: "Client verify key. URL-safe-base64-encoded [Ed25519 verify key](https://pynacl.readthedocs.io/en/stable/signing/#nacl.signing.VerifyKey) that corresponds to the client signing key, which is used to decrypt the API secret and sign vouchers"
                response_start_time:
                  type: "string"
                  format: "date-time"
                response_end_time:
                  type: "string"
                  format: "date-time"
      responses:
        201:
          description: "Collection created"
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: "string"
                    description: "Collection ID"
                  public_key_b64:
                    type: "string"
                    description: "Collection public key. URL-safe-base64-encoded [Curve25519 public key](https://pynacl.readthedocs.io/en/stable/public/#nacl.public.PublicKey) that corresponds to the collection private key, which is used to encrypt the API secret"
                  private_key_secret:
                    type: "string"
                    description: "API secret. Encrypted in a [Box](https://pynacl.readthedocs.io/en/stable/public/#nacl.public.Box) using the collection private key and client verify key, and URL-safe-base64-encoded"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Request is not JSON"
                - "JSON payload does not conform to schema"
                - "Public key could not be parsed"
                - "Fit model is not supported"
                - "attribute_y_index invalid"
  /{collectionId}/voucher:
    post:
      summary: "Registers the client serial of a voucher, issued at the time of this request to a user to redeem an entry form"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                collection_private_key_secret:
                  type: "string"
                  description: "API secret"
                client_serial_encrypt:
                  type: "string"
                  description: "Client serial of the voucher issued to the user. Must be unique for this collection"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        201:
          description: "Successful"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  entry_serial:
                    type: "string"
                    description: "Entry serial, to be included in the voucher issued to the user"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Request is not JSON"
                - "JSON payload does not conform to schema"
                - "Already enqueued"
                - "Incorrect collection private key secret"
                - "Client serial already used"
        410:
          description: "Not within collection interval"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                  - "Not within collection interval"
        404:
          description: "Collection ID not found"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                  - "Collection ID not found"
  /entry/{voucher}:
    get:
      summary: "Redeems a voucher and returns a page to enter values. Intended to be requested by the user"
      parameters:
      - name: "voucher"
        in: "path"
        required: true
        description: |
          A voucher: a string with the following values, delimited by `,`:
          - Client serial
          - Entry serial
          - UTC Posix timestamp of the response to `/{collectionId}/voucher`
          in a [SignedMessage](https://pynacl.readthedocs.io/en/stable/signing/#nacl.signing.SignedMessage) signed by the client signing key
        schema:
          type: "string"
      responses:
        200:
          description: "Entry page"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Voucher contains fewer than three values"
                - "Voucher contains more than three values"
                - "Timestamp invalid"
                - "Voucher already redeemed for a form"
                - "Voucher client serial does not match registration"
                - "Voucher not issued and registered at same time"
                - "Already enqueued"
                - "Voucher could not be verified"
        410:
          description: "Not within collection interval"
        404:
          description: "Entry does not exist"
  /{collectionId}/enqueue:
    post:
      summary: "Causes the model for this collection to be enqueued for fitting"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                collection_private_key_secret:
                  type: "string"
                  description: "API secret"
      responses:
        202:
          description: "Successfully enqueued"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Request is not JSON"
                - "JSON payload does not conform to schema"
                - "Already enqueued"
                - "Incorrect collection private key secret"
        404:
          description: "Collection ID not found"
  /{collectionId}/status:
    post:
      summary: "Obtains the status of this collection, or the fit object if the fit is complete"
      parameters:
      - name: "collectionId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                collection_private_key_secret:
                  type: "string"
                  description: "API secret"
      responses:
        200:
          description: "Pickled fit object from completed model"
          content:
            application/json:
              schema:
                oneOf:
                - type: "object"
                  properties:
                    status:
                      type: "string"
                      enum:
                      - "active"
                      - "enqueued"
                      - "running"
                      - "complete"
                    response_count:
                      type: "integer"
                      description: "Number of submitted responses"
                    model:
                      type: "object"
                      description: "The model properties provided on the initial call to `/`"
                      properties:
                        attributes:
                          type: "array"
                          items:
                            type: "string"
                          description: "Will be shown to the user as the names of the data collection fields"
                        fit_model:
                          type: "string"
                          enum:
                          - "PCA"
                          - "LinearRegression"
                          - "GaussianNB"
                          - "LogisticRegression"
                          - "KMeans"
                          - "StandardScaler"
                          description: "The diffprivlib model class instantiator to call"
                        attribute_y_index:
                          type: "number"
                          description: "If provided, must be an index within `attributes`"
                        fit_arguments:
                          type: "object"
                          description: "Will be passed to the diffprivlib model class instantiator"
                        description:
                          type: "string"
                          description: "Will be rendered as Markdown and shown to the user"
                        response_start_time:
                          type: "string"
                          format: "date-time"
                        response_end_time:
                          type: "string"
                          format: "date-time"
                - type: "object"
                  properties:
                    status:
                      type: "string"
                      enum:
                      - "complete"
                    response_count:
                      type: "integer"
                      description: "Number of submitted responses"
                    model:
                      type: "object"
                      description: "The model properties provided on the initial call to `/`"
                      properties:
                        attributes:
                          type: "array"
                          items:
                            type: "string"
                          description: "Will be shown to the user as the names of the data collection fields"
                        fit_model:
                          type: "string"
                          enum:
                          - "PCA"
                          - "LinearRegression"
                          - "GaussianNB"
                          - "LogisticRegression"
                          - "KMeans"
                          - "StandardScaler"
                          description: "The diffprivlib model class instantiator to call"
                        attribute_y_index:
                          type: "number"
                          description: "If provided, must be an index within `attributes`"
                        fit_arguments:
                          type: "object"
                          description: "Will be passed to the diffprivlib model class instantiator"
                        description:
                          type: "string"
                          description: "Will be rendered as Markdown and shown to the user"
                        response_start_time:
                          type: "string"
                          format: "date-time"
                        response_end_time:
                          type: "string"
                          format: "date-time"
                    result:
                      type: "string"
                      description: "URL-safe-base64-encoded pickle object of the fit result"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: "string"
                enum:
                - "Request is not JSON"
                - "JSON payload does not conform to schema"
                - "Incorrect collection private key secret"
        404:
          description: "Collection ID not found"
externalDocs:
  description: "GitHub"
  url: "http://github.com/scottcwang/dpaas"